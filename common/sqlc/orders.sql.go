// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: orders.sql

package sqlc

import (
	"context"
)

const createOrder = `-- name: CreateOrder :one
INSERT INTO orders (user_id, payment_id)
VALUES ($1, $2)
RETURNING id
`

type CreateOrderParams struct {
	UserID    int32  `db:"user_id"`
	PaymentID string `db:"payment_id"`
}

func (q *Queries) CreateOrder(ctx context.Context, arg CreateOrderParams) (int32, error) {
	row := q.db.QueryRow(ctx, createOrder, arg.UserID, arg.PaymentID)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const createOrderItem = `-- name: CreateOrderItem :one
INSERT INTO order_items (order_id, product_id, quantity)
VALUES ($1, $2, $3)
RETURNING id
`

type CreateOrderItemParams struct {
	OrderID   int32 `db:"order_id"`
	ProductID int32 `db:"product_id"`
	Quantity  int32 `db:"quantity"`
}

func (q *Queries) CreateOrderItem(ctx context.Context, arg CreateOrderItemParams) (int32, error) {
	row := q.db.QueryRow(ctx, createOrderItem, arg.OrderID, arg.ProductID, arg.Quantity)
	var id int32
	err := row.Scan(&id)
	return id, err
}
