// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: orders.sql

package sqlc

import (
	"context"
)

const createOrder = `-- name: CreateOrder :one
INSERT INTO orders (user_id, payment_id)
VALUES ($1, $2)
RETURNING id
`

type CreateOrderParams struct {
	UserID    int32  `db:"user_id"`
	PaymentID string `db:"payment_id"`
}

func (q *Queries) CreateOrder(ctx context.Context, arg CreateOrderParams) (int32, error) {
	row := q.db.QueryRow(ctx, createOrder, arg.UserID, arg.PaymentID)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const createOrderItem = `-- name: CreateOrderItem :one
INSERT INTO order_items (order_id, product_id, quantity)
VALUES ($1, $2, $3)
RETURNING id
`

type CreateOrderItemParams struct {
	OrderID   int32 `db:"order_id"`
	ProductID int32 `db:"product_id"`
	Quantity  int32 `db:"quantity"`
}

func (q *Queries) CreateOrderItem(ctx context.Context, arg CreateOrderItemParams) (int32, error) {
	row := q.db.QueryRow(ctx, createOrderItem, arg.OrderID, arg.ProductID, arg.Quantity)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const getOrder = `-- name: GetOrder :one
SELECT id, user_id, payment_id, status, created_at, updated_at
FROM orders
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetOrder(ctx context.Context, id int32) (Order, error) {
	row := q.db.QueryRow(ctx, getOrder, id)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.PaymentID,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getOrderByPaymentID = `-- name: GetOrderByPaymentID :one
SELECT id, user_id, payment_id, status, created_at, updated_at
FROM orders
WHERE payment_id = $1
LIMIT 1
`

func (q *Queries) GetOrderByPaymentID(ctx context.Context, paymentID string) (Order, error) {
	row := q.db.QueryRow(ctx, getOrderByPaymentID, paymentID)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.PaymentID,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listOrderItemsByOrderID = `-- name: ListOrderItemsByOrderID :many
SELECT id, order_id, product_id, quantity, created_at, updated_at
FROM order_items
WHERE order_id = $1
`

func (q *Queries) ListOrderItemsByOrderID(ctx context.Context, orderID int32) ([]OrderItem, error) {
	rows, err := q.db.Query(ctx, listOrderItemsByOrderID, orderID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []OrderItem{}
	for rows.Next() {
		var i OrderItem
		if err := rows.Scan(
			&i.ID,
			&i.OrderID,
			&i.ProductID,
			&i.Quantity,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateOrderStatus = `-- name: UpdateOrderStatus :exec
UPDATE orders
SET status = $2
WHERE id = $1
`

type UpdateOrderStatusParams struct {
	ID     int32       `db:"id"`
	Status OrderStatus `db:"status"`
}

func (q *Queries) UpdateOrderStatus(ctx context.Context, arg UpdateOrderStatusParams) error {
	_, err := q.db.Exec(ctx, updateOrderStatus, arg.ID, arg.Status)
	return err
}
