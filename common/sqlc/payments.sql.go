// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: payments.sql

package sqlc

import (
	"context"
)

const createPayment = `-- name: CreatePayment :exec
INSERT INTO payments (id, user_id, va_number, amount)
VALUES ($1, $2, $3, $4)
`

type CreatePaymentParams struct {
	ID       string  `db:"id"`
	UserID   int32   `db:"user_id"`
	VaNumber string  `db:"va_number"`
	Amount   float64 `db:"amount"`
}

func (q *Queries) CreatePayment(ctx context.Context, arg CreatePaymentParams) error {
	_, err := q.db.Exec(ctx, createPayment,
		arg.ID,
		arg.UserID,
		arg.VaNumber,
		arg.Amount,
	)
	return err
}

const getPayment = `-- name: GetPayment :one
SELECT id, user_id, va_number, amount, status, created_at, updated_at
FROM payments
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetPayment(ctx context.Context, id string) (Payment, error) {
	row := q.db.QueryRow(ctx, getPayment, id)
	var i Payment
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.VaNumber,
		&i.Amount,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updatePaymentStatus = `-- name: UpdatePaymentStatus :exec
UPDATE payments
SET status = $2
WHERE id = $1
`

type UpdatePaymentStatusParams struct {
	ID     string        `db:"id"`
	Status PaymentStatus `db:"status"`
}

func (q *Queries) UpdatePaymentStatus(ctx context.Context, arg UpdatePaymentStatusParams) error {
	_, err := q.db.Exec(ctx, updatePaymentStatus, arg.ID, arg.Status)
	return err
}
