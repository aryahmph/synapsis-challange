// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: cart_items.sql

package sqlc

import (
	"context"
)

const createCartItem = `-- name: CreateCartItem :one
INSERT INTO cart_items (product_id, user_id, quantity)
VALUES ($1, $2, $3)
RETURNING id
`

type CreateCartItemParams struct {
	ProductID int32 `db:"product_id"`
	UserID    int32 `db:"user_id"`
	Quantity  int32 `db:"quantity"`
}

func (q *Queries) CreateCartItem(ctx context.Context, arg CreateCartItemParams) (int32, error) {
	row := q.db.QueryRow(ctx, createCartItem, arg.ProductID, arg.UserID, arg.Quantity)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const deleteCartItem = `-- name: DeleteCartItem :exec
DELETE
FROM cart_items
WHERE id = $1
`

func (q *Queries) DeleteCartItem(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteCartItem, id)
	return err
}

const getCartItem = `-- name: GetCartItem :one
SELECT id, product_id, user_id, quantity, created_at, updated_at
FROM cart_items
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetCartItem(ctx context.Context, id int32) (CartItem, error) {
	row := q.db.QueryRow(ctx, getCartItem, id)
	var i CartItem
	err := row.Scan(
		&i.ID,
		&i.ProductID,
		&i.UserID,
		&i.Quantity,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listCartItemsByUserID = `-- name: ListCartItemsByUserID :many
SELECT id, product_id, user_id, quantity, created_at, updated_at
FROM cart_items
WHERE user_id = $1
`

func (q *Queries) ListCartItemsByUserID(ctx context.Context, userID int32) ([]CartItem, error) {
	rows, err := q.db.Query(ctx, listCartItemsByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []CartItem{}
	for rows.Next() {
		var i CartItem
		if err := rows.Scan(
			&i.ID,
			&i.ProductID,
			&i.UserID,
			&i.Quantity,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCartItemQuantity = `-- name: UpdateCartItemQuantity :exec
UPDATE cart_items
SET quantity = quantity + $2
WHERE id = $1
`

type UpdateCartItemQuantityParams struct {
	ID       int32 `db:"id"`
	Quantity int32 `db:"quantity"`
}

func (q *Queries) UpdateCartItemQuantity(ctx context.Context, arg UpdateCartItemQuantityParams) error {
	_, err := q.db.Exec(ctx, updateCartItemQuantity, arg.ID, arg.Quantity)
	return err
}

const verifyAvailableCartItem = `-- name: VerifyAvailableCartItem :one
SELECT id
FROM cart_items
WHERE product_id = $1
  AND user_id = $2
LIMIT 1
`

type VerifyAvailableCartItemParams struct {
	ProductID int32 `db:"product_id"`
	UserID    int32 `db:"user_id"`
}

func (q *Queries) VerifyAvailableCartItem(ctx context.Context, arg VerifyAvailableCartItemParams) (int32, error) {
	row := q.db.QueryRow(ctx, verifyAvailableCartItem, arg.ProductID, arg.UserID)
	var id int32
	err := row.Scan(&id)
	return id, err
}
